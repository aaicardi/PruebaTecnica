// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XianaCore.Infrastructure.Data;

namespace XianaCore.Infrastructure.Migrations
{
    [DbContext(typeof(XianaDbContext))]
    [Migration("20200929154405_TablaTerminosCondiciones")]
    partial class TablaTerminosCondiciones
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsVip")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollaboratorId");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WordGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTypeId");

                    b.HasIndex("WordGroupId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.CategoryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CategoryGroup");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.CategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryGroupId")
                        .HasColumnType("int");

                    b.Property<int>("WordGruopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryGroupId");

                    b.HasIndex("WordGruopId");

                    b.ToTable("CategoryType");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartamentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DepartamentId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Collaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ProfessionalId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Collaborator");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.CollaboratorCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVip")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollaboratorId");

                    b.ToTable("CollaboratorCategories");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calification")
                        .HasColumnType("int");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<string>("Coment")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Departament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Departament");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageShort")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.ToTable("Security");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.TermsConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TermsConditions");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.WordDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("TanslatedWord")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("WordGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("WordGroupId");

                    b.ToTable("WordDetail");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.WordGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WordContext")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("WordGroup");
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Advertisement", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.Category", "Category")
                        .WithMany("Advertisement")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Advertisement_Category")
                        .IsRequired();

                    b.HasOne("XianaCore.Infrastructure.Entities.Collaborator", "Collaborator")
                        .WithMany("Advertisement")
                        .HasForeignKey("CollaboratorId")
                        .HasConstraintName("FK_Advertisement_Collaborator")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Category", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.CategoryType", "CategoryType")
                        .WithMany("Category")
                        .HasForeignKey("CategoryTypeId")
                        .HasConstraintName("FK_Category_CategoryType")
                        .IsRequired();

                    b.HasOne("XianaCore.Infrastructure.Entities.WordGroup", "WordGroup")
                        .WithMany("Category")
                        .HasForeignKey("WordGroupId")
                        .HasConstraintName("FK_Category_WordGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.CategoryType", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.CategoryGroup", "CategoryGroup")
                        .WithMany("CategoryType")
                        .HasForeignKey("CategoryGroupId")
                        .HasConstraintName("FK_CategoryType_CategoryGroup")
                        .IsRequired();

                    b.HasOne("XianaCore.Infrastructure.Entities.WordGroup", "WordGruop")
                        .WithMany("CategoryType")
                        .HasForeignKey("WordGruopId")
                        .HasConstraintName("FK_CategoryType_WordGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.City", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.Departament", "Departament")
                        .WithMany("City")
                        .HasForeignKey("DepartamentId")
                        .HasConstraintName("FK_City_Departament")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Collaborator", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.City", "City")
                        .WithMany("Collaborator")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Collaborator_City")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.CollaboratorCategories", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.Category", "Category")
                        .WithMany("CollaboratorCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CollaboratorCategories_Category")
                        .IsRequired();

                    b.HasOne("XianaCore.Infrastructure.Entities.Collaborator", "Collaborator")
                        .WithMany("CollaboratorCategories")
                        .HasForeignKey("CollaboratorId")
                        .HasConstraintName("FK_CollaboratorCategories_Collaborator")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Comments", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.Collaborator", "Collaborator")
                        .WithMany("Comments")
                        .HasForeignKey("CollaboratorId")
                        .HasConstraintName("FK_Comments_Collaborator")
                        .IsRequired();

                    b.HasOne("XianaCore.Infrastructure.Entities.CollaboratorCategories", "Profession")
                        .WithMany("Comments")
                        .HasForeignKey("ProfessionId")
                        .HasConstraintName("FK_Comments_CollaboratorCategories")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Departament", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.Country", "Country")
                        .WithMany("Departament")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Departament_Country")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.Security", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.Collaborator", "Collaborator")
                        .WithMany("Security")
                        .HasForeignKey("CollaboratorId")
                        .HasConstraintName("FK_Security_Collaborator")
                        .IsRequired();
                });

            modelBuilder.Entity("XianaCore.Infrastructure.Entities.WordDetail", b =>
                {
                    b.HasOne("XianaCore.Infrastructure.Entities.Language", "Language")
                        .WithMany("WordDetail")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_WordDetail_Language")
                        .IsRequired();

                    b.HasOne("XianaCore.Infrastructure.Entities.WordGroup", "WordGroup")
                        .WithMany("WordDetail")
                        .HasForeignKey("WordGroupId")
                        .HasConstraintName("FK_WordDetail_WordGroup")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
